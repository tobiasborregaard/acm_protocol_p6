options:
  parameters:
    author: jonasj2001
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: test
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: '50000'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [640, 528.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt.pmt_python\nimport zmq\nimport pmt\nimport\
      \ threading\n\n\nclass blk(gr.sync_block):  # other base classes are basic_block,\
      \ decim_block, interp_block\n    \"\"\"Embedded Python Block example - a simple\
      \ multiply const\"\"\"\n\n    def __init__(self, addr = \"modcod\"):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='Embedded Python Block',   # will show up in GRC\n       \
      \     in_sig=None,\n            out_sig=None\n        )\n        # if an attribute\
      \ with the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.hello = 1\n        self.snr = 2.0\n\
      \        self.modcod = \"1\"\n        self.addr = addr\n        self.message_in\
      \ = 'msg_in'\n        self.message_port_register_in(pmt.intern(self.message_in))\n\
      \        self.set_msg_handler(pmt.intern(self.message_in), self.mailbox)\n \
      \       self.message_out = 'msg_out'\n        self.message_port_register_out(pmt.intern(self.message_out))\n\
      \n        #self.context = zmq.Context()\n        #self.socket = self.context.socket(zmq.REP)\n\
      \        #self.thread = threading.Thread(target=self.input_handler)\n      \
      \  #self.start()\n\n    def extract_pmt(self, msg):\n        try:\n        \
      \    data = pmt.to_python(msg)\n        except:\n            raise Exception(\"\
      Err: Invalid format\")\n            #self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(\"Err: Invalid format\"))\n        \n        return data\n\n  \
      \  def unpack(self, msg):\n        if msg[0] == self.addr:\n            return\
      \ msg[1:]\n        else: return False\n\n\n    def mailbox(self, msg):\n   \
      \     r = {}\n        try:\n            data = self.extract_pmt(msg)\n\n   \
      \         #If address check is active:\n            data = self.unpack(data)\n\
      \            if data == False: return \n\n            varname = list(data[1].keys())[0]\n\
      \            if varname not in self.__dict__:\n                raise Exception(\"\
      Err: Unknown variable\")\n            \n            if data[0].lower() == \"\
      get\":\n                r[varname] = self.__dict__[varname]\n            elif\
      \ data[0].lower() == \"set\":\n                if type(data[1][varname]) !=\
      \ type(self.__dict__[varname]):\n                    raise Exception(\"Err:\
      \ Variable in wrong format\")\n                else:\n                    self.__dict__[varname]\
      \ = data[1][varname]\n                    r[varname] = \"ok\"\n            \n\
      \            #If address return with SRC\n            r = [self.addr, r]\n\n\
      \            self.message_port_pub(pmt.intern(self.message_out), pmt.to_pmt(r))\n\
      \            return\n\n        except Exception as e:\n            self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(str(e)))\n\n    def work(self, input_items, output_items):\n  \
      \      \"\"\"example: multiply with constant\"\"\"\n        output_items[0][:]\
      \ = input_items[0] * self.example_param\n        return len(output_items[0])\n"
    addr: '"demux"'
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('addr', "'modcod'")], [('msg_in',
      'message', 1)], [('msg_out', 'message', 1)], 'Embedded Python Block example
      - a simple multiply const', ['addr'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [672, 304.0]
    rotation: 0
    state: true
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt.pmt_python\nimport zmq\nimport pmt\nimport\
      \ threading\n\n\nclass blk(gr.sync_block):  # other base classes are basic_block,\
      \ decim_block, interp_block\n    \"\"\"Embedded Python Block example - a simple\
      \ multiply const\"\"\"\n\n    def __init__(self, addr = \"modcod\"):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='Embedded Python Block',   # will show up in GRC\n       \
      \     in_sig=None,\n            out_sig=None\n        )\n        # if an attribute\
      \ with the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.modcod: str = \"1\"\n        self.addr\
      \ = addr\n        self.snr = 14.0\n        self.message_in = 'msg_in'\n    \
      \    self.message_port_register_in(pmt.intern(self.message_in))\n        self.set_msg_handler(pmt.intern(self.message_in),\
      \ self.mailbox)\n        self.message_out = 'msg_out'\n        self.message_port_register_out(pmt.intern(self.message_out))\n\
      \n        #self.context = zmq.Context()\n        #self.socket = self.context.socket(zmq.REP)\n\
      \        #self.thread = threading.Thread(target=self.input_handler)\n      \
      \  #self.start()\n\n    def extract_pmt(self, msg):\n        try:\n        \
      \    data = pmt.to_python(msg)\n        except:\n            self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(\"Err: Invalid format\"))\n        \n        return data\n\n  \
      \  def unpack(self, msg):\n        if msg[0] == self.addr:\n            return\
      \ msg[1:]\n        else: return False\n\n\n    def mailbox(self, msg):\n   \
      \     r = {}\n        try:\n            data = self.extract_pmt(msg)\n\n   \
      \         #If address check is active:\n            data = self.unpack(data)\n\
      \            if data == False: return \n\n            varname = list(data[1].keys())[0]\n\
      \            if varname not in self.__dict__:\n                raise Exception(\"\
      Err: Unknown variable\")\n            \n            if data[0].lower() == \"\
      get\":\n                r[varname] = self.__dict__[varname]\n            elif\
      \ data[0].lower() == \"set\":\n                if type(data[1][varname]) !=\
      \ type(self.__dict__[varname]):\n                    raise Exception(\"Err:\
      \ Variable in wrong format\")\n                else:\n                    self.__dict__[varname]\
      \ = data[1][varname]\n                    r[varname] = \"ok\"\n            \n\
      \            #If address return with SRC\n            r = [self.addr, r]\n\n\
      \            self.message_port_pub(pmt.intern(self.message_out), pmt.to_pmt(r))\n\
      \            return\n\n        except Exception as e:\n            self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(str(e)))\n\n    def input_handler(self):\n        #self.socket.bind(self.ip)\n\
      \        return\n\n    def work(self, input_items, output_items):\n        \"\
      \"\"example: multiply with constant\"\"\"\n        output_items[0][:] = input_items[0]\
      \ * self.example_param\n        return len(output_items[0])\n"
    addr: '''snr_meas'''
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('addr', "'modcod'")], [('msg_in',
      'message', 1)], [('msg_out', 'message', 1)], 'Embedded Python Block example
      - a simple multiply const', ['addr'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [672, 224.0]
    rotation: 0
    state: true
- name: epy_block_0_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt.pmt_python\nimport zmq\nimport pmt\nimport\
      \ threading\n\n\nclass blk(gr.sync_block):  # other base classes are basic_block,\
      \ decim_block, interp_block\n    \"\"\"Embedded Python Block example - a simple\
      \ multiply const\"\"\"\n\n    def __init__(self, addr = \"modcod\"):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='Embedded Python Block',   # will show up in GRC\n       \
      \     in_sig=None,\n            out_sig=None\n        )\n        # if an attribute\
      \ with the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.hello = 1\n        self.snr = 2.0\n\
      \        self.modcod = \"1\"\n        self.addr = addr\n        self.message_in\
      \ = 'msg_in'\n        self.message_port_register_in(pmt.intern(self.message_in))\n\
      \        self.set_msg_handler(pmt.intern(self.message_in), self.mailbox)\n \
      \       self.message_out = 'msg_out'\n        self.message_port_register_out(pmt.intern(self.message_out))\n\
      \n        #self.context = zmq.Context()\n        #self.socket = self.context.socket(zmq.REP)\n\
      \        #self.thread = threading.Thread(target=self.input_handler)\n      \
      \  #self.start()\n\n    def extract_pmt(self, msg):\n        try:\n        \
      \    data = pmt.to_python(msg)\n        except:\n            raise Exception(\"\
      Err: Invalid format\")\n            #self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(\"Err: Invalid format\"))\n        \n        return data\n\n  \
      \  def unpack(self, msg):\n        if msg[0] == self.addr:\n            return\
      \ msg[1:]\n        else: return False\n\n\n    def mailbox(self, msg):\n   \
      \     r = {}\n        try:\n            data = self.extract_pmt(msg)\n\n   \
      \         #If address check is active:\n            data = self.unpack(data)\n\
      \            if data == False: return \n\n            varname = list(data[1].keys())[0]\n\
      \            if varname not in self.__dict__:\n                raise Exception(\"\
      Err: Unknown variable\")\n            \n            if data[0].lower() == \"\
      get\":\n                r[varname] = self.__dict__[varname]\n            elif\
      \ data[0].lower() == \"set\":\n                if type(data[1][varname]) !=\
      \ type(self.__dict__[varname]):\n                    raise Exception(\"Err:\
      \ Variable in wrong format\")\n                else:\n                    self.__dict__[varname]\
      \ = data[1][varname]\n                    r[varname] = \"ok\"\n            \n\
      \            #If address return with SRC\n            r = [self.addr, r]\n\n\
      \            self.message_port_pub(pmt.intern(self.message_out), pmt.to_pmt(r))\n\
      \            return\n\n        except Exception as e:\n            self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(str(e)))\n\n    def work(self, input_items, output_items):\n  \
      \      \"\"\"example: multiply with constant\"\"\"\n        output_items[0][:]\
      \ = input_items[0] * self.example_param\n        return len(output_items[0])\n"
    addr: '"demux_1"'
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('addr', "'modcod'")], [('msg_in',
      'message', 1)], [('msg_out', 'message', 1)], 'Embedded Python Block example
      - a simple multiply const', ['addr'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [672, 364.0]
    rotation: 0
    state: true
- name: epy_block_0_1_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt.pmt_python\nimport zmq\nimport pmt\nimport\
      \ threading\n\n\nclass blk(gr.sync_block):  # other base classes are basic_block,\
      \ decim_block, interp_block\n    \"\"\"Embedded Python Block example - a simple\
      \ multiply const\"\"\"\n\n    def __init__(self, addr = \"modcod\"):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='Embedded Python Block',   # will show up in GRC\n       \
      \     in_sig=None,\n            out_sig=None\n        )\n        # if an attribute\
      \ with the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.hello = 1\n        self.snr = 2.0\n\
      \        self.modcod = \"1\"\n        self.addr = addr\n        self.message_in\
      \ = 'msg_in'\n        self.message_port_register_in(pmt.intern(self.message_in))\n\
      \        self.set_msg_handler(pmt.intern(self.message_in), self.mailbox)\n \
      \       self.message_out = 'msg_out'\n        self.message_port_register_out(pmt.intern(self.message_out))\n\
      \n        #self.context = zmq.Context()\n        #self.socket = self.context.socket(zmq.REP)\n\
      \        #self.thread = threading.Thread(target=self.input_handler)\n      \
      \  #self.start()\n\n    def extract_pmt(self, msg):\n        try:\n        \
      \    data = pmt.to_python(msg)\n        except:\n            raise Exception(\"\
      Err: Invalid format\")\n            #self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(\"Err: Invalid format\"))\n        \n        return data\n\n  \
      \  def unpack(self, msg):\n        if msg[0] == self.addr:\n            return\
      \ msg[1:]\n        else: return False\n\n\n    def mailbox(self, msg):\n   \
      \     r = {}\n        try:\n            data = self.extract_pmt(msg)\n\n   \
      \         #If address check is active:\n            data = self.unpack(data)\n\
      \            if data == False: return \n\n            varname = list(data[1].keys())[0]\n\
      \            if varname not in self.__dict__:\n                raise Exception(\"\
      Err: Unknown variable\")\n            \n            if data[0].lower() == \"\
      get\":\n                r[varname] = self.__dict__[varname]\n            elif\
      \ data[0].lower() == \"set\":\n                if type(data[1][varname]) !=\
      \ type(self.__dict__[varname]):\n                    raise Exception(\"Err:\
      \ Variable in wrong format\")\n                else:\n                    self.__dict__[varname]\
      \ = data[1][varname]\n                    r[varname] = \"ok\"\n            \n\
      \            #If address return with SRC\n            r = [self.addr, r]\n\n\
      \            self.message_port_pub(pmt.intern(self.message_out), pmt.to_pmt(r))\n\
      \            return\n\n        except Exception as e:\n            self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(str(e)))\n\n    def work(self, input_items, output_items):\n  \
      \      \"\"\"example: multiply with constant\"\"\"\n        output_items[0][:]\
      \ = input_items[0] * self.example_param\n        return len(output_items[0])\n"
    addr: '"mux_1"'
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('addr', "'modcod'")], [('msg_in',
      'message', 1)], [('msg_out', 'message', 1)], 'Embedded Python Block example
      - a simple multiply const', ['addr'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [672, 164.0]
    rotation: 0
    state: true
- name: epy_block_0_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt.pmt_python\nimport zmq\nimport pmt\nimport\
      \ threading\n\n\nclass blk(gr.sync_block):  # other base classes are basic_block,\
      \ decim_block, interp_block\n    \"\"\"Embedded Python Block example - a simple\
      \ multiply const\"\"\"\n\n    def __init__(self, addr = \"modcod\"):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='Embedded Python Block',   # will show up in GRC\n       \
      \     in_sig=None,\n            out_sig=None\n        )\n        # if an attribute\
      \ with the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.hello = 1\n        self.snr = 2.0\n\
      \        self.modcod = \"1\"\n        self.addr = addr\n        self.message_in\
      \ = 'msg_in'\n        self.message_port_register_in(pmt.intern(self.message_in))\n\
      \        self.set_msg_handler(pmt.intern(self.message_in), self.mailbox)\n \
      \       self.message_out = 'msg_out'\n        self.message_port_register_out(pmt.intern(self.message_out))\n\
      \n        #self.context = zmq.Context()\n        #self.socket = self.context.socket(zmq.REP)\n\
      \        #self.thread = threading.Thread(target=self.input_handler)\n      \
      \  #self.start()\n\n    def extract_pmt(self, msg):\n        try:\n        \
      \    data = pmt.to_python(msg)\n        except:\n            raise Exception(\"\
      Err: Invalid format\")\n            #self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(\"Err: Invalid format\"))\n        \n        return data\n\n  \
      \  def unpack(self, msg):\n        if msg[0] == self.addr:\n            return\
      \ msg[1:]\n        else: return False\n\n\n    def mailbox(self, msg):\n   \
      \     r = {}\n        try:\n            data = self.extract_pmt(msg)\n\n   \
      \         #If address check is active:\n            data = self.unpack(data)\n\
      \            if data == False: return \n\n            varname = list(data[1].keys())[0]\n\
      \            if varname not in self.__dict__:\n                raise Exception(\"\
      Err: Unknown variable\")\n            \n            if data[0].lower() == \"\
      get\":\n                r[varname] = self.__dict__[varname]\n            elif\
      \ data[0].lower() == \"set\":\n                if type(data[1][varname]) !=\
      \ type(self.__dict__[varname]):\n                    raise Exception(\"Err:\
      \ Variable in wrong format\")\n                else:\n                    self.__dict__[varname]\
      \ = data[1][varname]\n                    r[varname] = \"ok\"\n            \n\
      \            #If address return with SRC\n            r = [self.addr, r]\n\n\
      \            self.message_port_pub(pmt.intern(self.message_out), pmt.to_pmt(r))\n\
      \            return\n\n        except Exception as e:\n            self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(str(e)))\n\n    def work(self, input_items, output_items):\n  \
      \      \"\"\"example: multiply with constant\"\"\"\n        output_items[0][:]\
      \ = input_items[0] * self.example_param\n        return len(output_items[0])\n"
    addr: '"mux"'
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('addr', "'modcod'")], [('msg_in',
      'message', 1)], [('msg_out', 'message', 1)], 'Embedded Python Block example
      - a simple multiply const', ['addr'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [672, 100.0]
    rotation: 0
    state: true
- name: zeromq_pub_msg_sink_0
  id: zeromq_pub_msg_sink
  parameters:
    address: tcp://*:5556
    affinity: ''
    alias: ''
    bind: 'True'
    comment: ''
    timeout: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1056, 296.0]
    rotation: 0
    state: true
- name: zeromq_rep_sink_0
  id: zeromq_rep_sink
  parameters:
    address: tcp://*:5557
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    pass_tags: 'False'
    timeout: '100'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [976, 512.0]
    rotation: 0
    state: true
- name: zeromq_req_source_0
  id: zeromq_req_source
  parameters:
    address: tcp://localhost:5558
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    maxoutbuf: '0'
    minoutbuf: '0'
    pass_tags: 'False'
    timeout: '100'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [264, 512.0]
    rotation: 0
    state: true
- name: zeromq_sub_msg_source_0
  id: zeromq_sub_msg_source
  parameters:
    address: tcp://localhost:5555
    affinity: ''
    alias: ''
    bind: 'False'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    timeout: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 296.0]
    rotation: 0
    state: true

connections:
- [blocks_throttle_0, '0', zeromq_rep_sink_0, '0']
- [epy_block_0, msg_out, zeromq_pub_msg_sink_0, in]
- [epy_block_0_0, msg_out, zeromq_pub_msg_sink_0, in]
- [epy_block_0_1, msg_out, zeromq_pub_msg_sink_0, in]
- [epy_block_0_1_0, msg_out, zeromq_pub_msg_sink_0, in]
- [epy_block_0_2, msg_out, zeromq_pub_msg_sink_0, in]
- [zeromq_req_source_0, '0', blocks_throttle_0, '0']
- [zeromq_sub_msg_source_0, out, epy_block_0, msg_in]
- [zeromq_sub_msg_source_0, out, epy_block_0_0, msg_in]
- [zeromq_sub_msg_source_0, out, epy_block_0_1, msg_in]
- [zeromq_sub_msg_source_0, out, epy_block_0_1_0, msg_in]
- [zeromq_sub_msg_source_0, out, epy_block_0_2, msg_in]

metadata:
  file_format: 1
  grc_version: 3.10.5.1
