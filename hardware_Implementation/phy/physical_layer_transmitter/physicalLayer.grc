options:
  parameters:
    author: CS6 - 615
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: physical_layer_transmitter
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: acm_phy_layer
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 12.0]
    rotation: 0
    state: enabled

blocks:
- name: bandwidth
  id: variable
  parameters:
    comment: ''
    value: '25000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [408, 20.0]
    rotation: 0
    state: enabled
- name: decimation
  id: variable
  parameters:
    comment: ''
    value: samp_rate/(sps*th.modcod(bandwidth, "1"))
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [408, 108.0]
    rotation: 0
    state: enabled
- name: repack_size
  id: variable
  parameters:
    comment: ''
    value: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [264, 100.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 200e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [264, 20.0]
    rotation: 0
    state: enabled
- name: sps
  id: variable
  parameters:
    comment: ''
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 12.0]
    rotation: 0
    state: enabled
- name: analog_frequency_modulator_fc_0
  id: analog_frequency_modulator_fc
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    sensitivity: (np.pi / 2) / sps
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2136, 540.0]
    rotation: 0
    state: enabled
- name: analog_frequency_modulator_fc_0_0
  id: analog_frequency_modulator_fc
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    sensitivity: (np.pi / 2) / sps
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2144, 428.0]
    rotation: 0
    state: enabled
- name: analog_quadrature_demod_cf_0
  id: analog_quadrature_demod_cf
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gain: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 1444.0]
    rotation: 0
    state: enabled
- name: analog_quadrature_demod_cf_1
  id: analog_quadrature_demod_cf
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gain: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1000, 1276.0]
    rotation: 0
    state: enabled
- name: analog_quadrature_demod_cf_2
  id: analog_quadrature_demod_cf
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gain: (samp_rate*2)/(2*np.pi*th.modcod(bandwidth, "9"))
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [992, 1052.0]
    rotation: 0
    state: enabled
- name: blocks_float_to_uchar_0
  id: blocks_float_to_uchar
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2104, 1208.0]
    rotation: 0
    state: enabled
- name: blocks_msgpair_to_var_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: repack_size
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1076.0, 632]
    rotation: 270
    state: enabled
- name: blocks_msgpair_to_var_1
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    target: decimation
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1148.0, 624]
    rotation: 270
    state: enabled
- name: blocks_repack_bits_bb_0
  id: blocks_repack_bits_bb
  parameters:
    affinity: ''
    alias: ''
    align_output: 'False'
    comment: ''
    endianness: gr.GR_MSB_FIRST
    k: repack_size
    l: '8'
    len_tag_key: '""'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2672, 1252.0]
    rotation: 0
    state: enabled
- name: blocks_repack_bits_bb_0_0
  id: blocks_repack_bits_bb
  parameters:
    affinity: ''
    alias: ''
    align_output: 'False'
    comment: ''
    endianness: gr.GR_MSB_FIRST
    k: '8'
    l: repack_size
    len_tag_key: '""'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [360, 508.0]
    rotation: 0
    state: enabled
- name: blocks_repeat_0
  id: blocks_repeat
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    interp: sps
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1776, 428.0]
    rotation: 0
    state: enabled
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: 2**15
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [104, 1440.0]
    rotation: 0
    state: enabled
- name: blocks_throttle2_0
  id: blocks_throttle2
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    limit: auto
    maximum: '0.1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [688, 508.0]
    rotation: 0
    state: enabled
- name: blocks_vco_c_0
  id: blocks_vco_c
  parameters:
    affinity: ''
    alias: ''
    amplitude: '0.5'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    sensitivity: (2*np.pi*th.modcod(bandwidth, "9"))/1.5
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2152, 296.0]
    rotation: 0
    state: enabled
- name: digital_binary_slicer_fb_0
  id: digital_binary_slicer_fb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1864, 1400.0]
    rotation: 0
    state: enabled
- name: digital_binary_slicer_fb_0_0
  id: digital_binary_slicer_fb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1864, 1288.0]
    rotation: 0
    state: enabled
- name: digital_chunks_to_symbols_xx_0
  id: digital_chunks_to_symbols_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    dimension: '1'
    in_type: byte
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    out_type: float
    symbol_table: '[-1, 1]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1440, 532.0]
    rotation: 0
    state: enabled
- name: digital_chunks_to_symbols_xx_0_0
  id: digital_chunks_to_symbols_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    dimension: '1'
    in_type: byte
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    out_type: float
    symbol_table: '[-1, 1]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1440, 420.0]
    rotation: 0
    state: enabled
- name: digital_chunks_to_symbols_xx_1
  id: digital_chunks_to_symbols_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    dimension: '1'
    in_type: byte
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    out_type: float
    symbol_table: '[-1.5, -0.5, 0.5, 1.5]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1432, 308.0]
    rotation: 0
    state: enabled
- name: digital_symbol_sync_xx_1_0
  id: digital_symbol_sync_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: digital.constellation_bpsk().base()
    damping: '1.0'
    loop_bw: '0.045'
    max_dev: '1.5'
    maxoutbuf: '0'
    minoutbuf: '0'
    nfilters: '64'
    osps: '1'
    pfb_mf_taps: '[]'
    resamp_type: digital.IR_PFB_NO_MF
    sps: sps
    ted_gain: '1.0'
    ted_type: digital.TED_SIGNAL_TIMES_SLOPE_ML
    type: ff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264, 1432.0]
    rotation: 0
    state: enabled
- name: digital_symbol_sync_xx_1_0_0
  id: digital_symbol_sync_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: digital.constellation_bpsk().base()
    damping: '1.0'
    loop_bw: '0.045'
    max_dev: '1.5'
    maxoutbuf: '0'
    minoutbuf: '0'
    nfilters: '64'
    osps: '1'
    pfb_mf_taps: '[]'
    resamp_type: digital.IR_PFB_NO_MF
    sps: sps
    ted_gain: '1.0'
    ted_type: digital.TED_SIGNAL_TIMES_SLOPE_ML
    type: ff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264, 1200.0]
    rotation: 0
    state: enabled
- name: digital_symbol_sync_xx_1_0_0_0
  id: digital_symbol_sync_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: digital.constellation_bpsk().base()
    damping: '1.0'
    loop_bw: '0.045'
    max_dev: '1.5'
    maxoutbuf: '0'
    minoutbuf: '0'
    nfilters: '64'
    osps: '1'
    pfb_mf_taps: '[]'
    resamp_type: digital.IR_PFB_NO_MF
    sps: sps
    ted_gain: '1.0'
    ted_type: digital.TED_SIGNAL_TIMES_SLOPE_ML
    type: ff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264, 968.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\nimport\
      \ json\n\nclass blk(gr.sync_block):  # other base classes are basic_block, decim_block,\
      \ interp_block\n    \n    def __init__(self, addr = \"modcod\", samp_rate=32000,\
      \ bandwidth=25000, sps = 4):  # only default arguments here\n        gr.sync_block.__init__(\n\
      \            self,\n            name='DEMUX',   # will show up in GRC\n    \
      \        in_sig = [np.byte], \n            out_sig = [np.byte, np.byte, np.byte],\n\
      \            # interp = interpolation\n        )\n        self.addr = addr\n\
      \        self._modcod = \"1\" # default modcod\n        self.samp_rate = samp_rate\n\
      \        self.bandwidth = bandwidth\n        self.repack = 1\n        self.decimation\
      \ = 1\n        self.sps = sps\n        # read MODCOD from json file      \n\
      \        self.filename = \"MODCOD.json\"\n        self.json_data = None\n  \
      \      \n        \n        # message port setup\n        self.message_in = 'msg_in'\n\
      \        self.message_port_register_in(pmt.intern(self.message_in))\n      \
      \  self.set_msg_handler(pmt.intern(self.message_in), self.mailbox)\n       \
      \ self.message_out = 'msg_out'\n        self.message_port_register_out(pmt.intern(self.message_out))\n\
      \n        self.message_out2 = 'repack_out'\n        self.message_port_register_out(pmt.intern(self.message_out2))\n\
      \n        self.message_out3 = 'decim_out'\n        self.message_port_register_out(pmt.intern(self.message_out3))\n\
      \n\n        \n    def extract_pmt(self, msg):\n        try:\n            data\
      \ = pmt.to_python(msg)\n        except:\n            self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(\"Err: Invalid format\"))\n        return data\n\n    def unpack(self,\
      \ msg):\n        if msg[0] == self.addr:\n            return msg[1:]\n     \
      \   else: return False\n\n    @property\n    def modcod(self):\n        return\
      \ self._modcod\n    \n    @modcod.setter\n    def modcod(self, value: str):\n\
      \        self._modcod = value\n        repack = 1\n        \n        modcod_spect\
      \ = self.json_data[self.modcod][\"SPECT\"]     \n        throughput = modcod_spect*self.bandwidth\n\
      \        if self.json_data[self.modcod][\"MOD\"] == \"g4FSK\":\n           \
      \ repack = 2\n            throughput = 0.5*throughput # symbol rate conversion\n\
      \ \n        # Calculate the decimation factor for the bitrate of the rational\
      \ resampler\n        self.decimation = self.samp_rate/(throughput*self.sps)\n\
      \        \n        # Define the interpolation rate globally using msg output\n\
      \        decimation = pmt.to_pmt(self.decimation)\n        decim_msg = pmt.cons(pmt.string_to_symbol(\"\
      decimation\"), decimation)\n        self.message_port_pub(pmt.intern(self.message_out3),\
      \ decim_msg)\n\n        # Define the repack size globally using msg output \
      \      \n        if self.repack != repack:\n            self.repack = repack\n\
      \            repack = pmt.from_long(repack)\n            msg = pmt.cons(pmt.string_to_symbol(\"\
      repack_size\"), repack)\n            self.message_port_pub(pmt.intern(self.message_out2),\
      \ msg)\n\n    def mailbox(self, msg):\n        r = {}\n        try:\n      \
      \      data = self.extract_pmt(msg)\n\n            #If address check is active:\n\
      \            data = self.unpack(data)\n            if data == False: return\
      \ \n\n            varname = list(data[1].keys())[0]\n            if varname\
      \ == \"modcod\":\n                pass\n            elif varname not in self.__dict__:\n\
      \                raise Exception(\"Err: Unknown variable\")\n            \n\
      \            if data[0].lower() == \"get\":\n                if varname == \"\
      modcod\":\n                    r[varname] = self.modcod\n                else:\n\
      \                    r[varname] = self.__dict__[varname]\n            elif data[0].lower()\
      \ == \"set\":\n                if varname == \"modcod\":\n                 \
      \   self.modcod = data[1][varname]\n                    r[varname] = \"ok\"\n\
      \                elif type(data[1][varname]) != type(self.__dict__[varname]):\n\
      \                    raise Exception(\"Err: Variable in wrong format\")\n  \
      \              else:\n                    self.__dict__[varname] = data[1][varname]\n\
      \                    r[varname] = \"ok\"\n            \n            #If address\
      \ return with SRC\n            r = [self.addr, r]\n\n            self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(r))\n            return\n\n        except Exception as e:\n   \
      \         self.message_port_pub(pmt.intern(self.message_out), pmt.to_pmt(str(e)))\n\
      \   \n    def work(self, input_items, output_items):\n        if self.json_data\
      \ == None:\n            with open(self.filename) as json_file:\n           \
      \     self.json_data = json.load(json_file)\n                \n        # determine\
      \ the appropriate modcod\n        modcod_idx = self.json_data[self.modcod][\"\
      MOD\"]\n        match modcod_idx:\n            case \"g4FSK\":\n           \
      \     modcod_idx = 0\n            case \"MSK\":\n                modcod_idx\
      \ = 1\n            case \"gMSK\":\n                modcod_idx = 2\n        \
      \    case _:\n                raise ValueError(\"Invalid modcod\")\n       \
      \ # Transmit data to the desired modulation scheme, remaining sources received\
      \ a\n        # bitstream of 0's     \n        output_items[modcod_idx][:] =\
      \ input_items[0]   \n        # for i in range(len(input_items[0])):\n      \
      \  #     for j in range(self._interp):\n        #         output_items[modcod_idx][i*self._interp\
      \ + j] = input_items[0][i]\n            \n\n        return len(output_items[0])"
    addr: '''mux'''
    affinity: ''
    alias: ''
    bandwidth: bandwidth
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    sps: '4'
  states:
    _io_cache: ('DEMUX', 'blk', [('addr', "'modcod'"), ('samp_rate', '32000'), ('bandwidth',
      '25000'), ('sps', '4')], [('0', 'byte', 1), ('msg_in', 'message', 1)], [('0',
      'byte', 1), ('1', 'byte', 1), ('2', 'byte', 1), ('decim_out', 'message', 1),
      ('repack_out', 'message', 1), ('msg_out', 'message', 1)], '', ['addr', 'bandwidth',
      'samp_rate', 'sps'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [984, 404.0]
    rotation: 0
    state: enabled
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\nimport\
      \ json\n\n\nclass blk(gr.sync_block):  # other base classes are basic_block,\
      \ decim_block, interp_block\n\n    def __init__(self, addr = \"modcod\"):  #\
      \ only default arguments here\n        gr.sync_block.__init__(\n           \
      \ self,\n            name='DEMUX',   # will show up in GRC\n            in_sig\
      \ = [np.complex64], \n            out_sig = [np.complex64, np.complex64, np.complex64]\n\
      \        )\n        self.addr = addr\n        self.modcod = \"1\" # default\
      \ modcod\n       \n\n        # read MODCOD from json file\n        self.filename\
      \ = \"MODCOD.json\"\n        self.json_data = None\n        \n        \n   \
      \     # message port setup\n        self.message_in = 'msg_in'\n        self.message_port_register_in(pmt.intern(self.message_in))\n\
      \        self.set_msg_handler(pmt.intern(self.message_in), self.mailbox)\n \
      \       self.message_out = 'msg_out'\n        self.message_port_register_out(pmt.intern(self.message_out))\n\
      \        \n    def extract_pmt(self, msg):\n        try:\n            data =\
      \ pmt.to_python(msg)\n        except:\n            self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(\"Err: Invalid format\"))\n        return data\n\n    def unpack(self,\
      \ msg):\n        if msg[0] == self.addr:\n            return msg[1:]\n     \
      \   else: return False\n\n\n    def mailbox(self, msg):\n        r = {}\n  \
      \      try:\n            data = self.extract_pmt(msg)\n\n            #If address\
      \ check is active:\n            data = self.unpack(data)\n            if data\
      \ == False: return \n\n            varname = list(data[1].keys())[0]\n     \
      \       if varname not in self.__dict__:\n                raise Exception(\"\
      Err: Unknown variable\")\n            \n            if data[0].lower() == \"\
      get\":\n                r[varname] = self.__dict__[varname]\n            elif\
      \ data[0].lower() == \"set\":\n                if type(data[1][varname]) !=\
      \ type(self.__dict__[varname]):\n                    raise Exception(\"Err:\
      \ Variable in wrong format\")\n                else:\n                    self.__dict__[varname]\
      \ = data[1][varname]\n                    r[varname] = \"ok\"\n            \n\
      \            #If address return with SRC\n            r = [self.addr, r]\n\n\
      \            self.message_port_pub(pmt.intern(self.message_out), pmt.to_pmt(r))\n\
      \            return\n\n        except Exception as e:\n            self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(str(e)))\n   \n    def work(self, input_items, output_items):\n\
      \        if self.json_data == None:\n            with open(self.filename) as\
      \ json_file:\n                self.json_data = json.load(json_file)\n      \
      \      \n        # determine the appropriate modcod\n        modcod_idx = self.json_data[self.modcod][\"\
      MOD\"]\n        match modcod_idx:\n            case \"g4FSK\":\n           \
      \     modcod_idx = 0\n            case \"MSK\":\n                modcod_idx\
      \ = 1\n            case \"gMSK\":\n                modcod_idx = 2\n        \
      \    case _:\n                raise ValueError(\"Invalid modcod\")\n       \
      \ output_items[modcod_idx][:] = input_items[0][:] \n\n        return len(output_items[0])"
    addr: '''demux'''
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('DEMUX', 'blk', [('addr', "'modcod'")], [('0', 'complex', 1), ('msg_in',
      'message', 1)], [('0', 'complex', 1), ('1', 'complex', 1), ('2', 'complex',
      1), ('msg_out', 'message', 1)], '', ['addr'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 1260.0]
    rotation: 0
    state: enabled
- name: epy_block_1_0_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\nimport\
      \ json\n\n\nclass blk(gr.sync_block):  # other base classes are basic_block,\
      \ decim_block, interp_block\n\n    def __init__(self, addr=\"modcod\"):  # only\
      \ default arguments here\n        gr.sync_block.__init__(\n            self,\n\
      \            name='MUX',   # will show up in GRC\n            in_sig = [np.complex64,\
      \ np.complex64, np.complex64],\n            out_sig = [np.complex64]\n     \
      \   )\n        self.addr = addr\n        self.modcod = \"1\" # default modcod\n\
      \        \n        # read MODCOD from json file\n        # file_name = 'MODCOD.json'\n\
      \        self.filename = \"MODCOD.json\"\n        self.json_data = None\n\n\
      \        # message port setup\n        self.message_in = 'msg_in'\n        self.message_port_register_in(pmt.intern(self.message_in))\n\
      \        self.set_msg_handler(pmt.intern(self.message_in), self.mailbox)\n \
      \       self.message_out = 'msg_out'\n        self.message_port_register_out(pmt.intern(self.message_out))\n\
      \        \n    def extract_pmt(self, msg):\n        try:\n            data =\
      \ pmt.to_python(msg)\n        except:\n            self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(\"Err: Invalid format\"))\n        return data\n\n    def unpack(self,\
      \ msg):\n        if msg[0] == self.addr:\n            return msg[1:]\n     \
      \   else: return False\n\n\n    def mailbox(self, msg):\n        r = {}\n  \
      \      try:\n            data = self.extract_pmt(msg)\n\n            #If address\
      \ check is active:\n            data = self.unpack(data)\n            if data\
      \ == False: return \n\n            varname = list(data[1].keys())[0]\n     \
      \       if varname not in self.__dict__:\n                raise Exception(\"\
      Err: Unknown variable\")\n            \n            if data[0].lower() == \"\
      get\":\n                r[varname] = self.__dict__[varname]\n            elif\
      \ data[0].lower() == \"set\":\n                if type(data[1][varname]) !=\
      \ type(self.__dict__[varname]):\n                    raise Exception(\"Err:\
      \ Variable in wrong format\")\n                else:\n                    self.__dict__[varname]\
      \ = data[1][varname]\n                    r[varname] = \"ok\"\n            \n\
      \            #If address return with SRC\n            r = [self.addr, r]\n\n\
      \            self.message_port_pub(pmt.intern(self.message_out), pmt.to_pmt(r))\n\
      \            return\n\n        except Exception as e:\n            self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(str(e)))\n\n   \n    def work(self, input_items, output_items):\n\
      \        if self.json_data == None:\n            with open(self.filename) as\
      \ json_file:\n                self.json_data = json.load(json_file)\n\n    \
      \     # determine the appropriate modcod\n        modcod_idx = self.json_data[self.modcod][\"\
      MOD\"]\n        match modcod_idx:\n            case \"g4FSK\":\n           \
      \     modcod_idx = 0\n            case \"MSK\":\n                modcod_idx\
      \ = 1\n            case \"gMSK\":\n                modcod_idx = 2\n        \
      \    case _:\n                raise ValueError(\"Invalid modcod\")\n       \
      \ \n        output_items[0][:] = input_items[modcod_idx] \n        \n      \
      \  return len(output_items[0])\n"
    addr: '''mux_1'''
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('MUX', 'blk', [('addr', "'modcod'")], [('0', 'complex', 1), ('1',
      'complex', 1), ('2', 'complex', 1), ('msg_in', 'message', 1)], [('0', 'complex',
      1), ('msg_out', 'message', 1)], '', ['addr'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2496, 412.0]
    rotation: 0
    state: enabled
- name: epy_block_1_0_0_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\nimport\
      \ json\n\n\nclass blk(gr.sync_block):  # other base classes are basic_block,\
      \ decim_block, interp_block\n\n    def __init__(self, addr=\"modcod\"):  # only\
      \ default arguments here\n        gr.sync_block.__init__(\n            self,\n\
      \            name='MUX',   # will show up in GRC\n            in_sig = [np.byte,\
      \ np.byte, np.byte],\n            out_sig = [np.byte]\n        )\n        self.addr\
      \ = addr\n        self.modcod = \"1\" # default modcod\n        \n        #\
      \ read MODCOD from json file\n        # file_name = 'MODCOD.json'\n        self.filename\
      \ = \"MODCOD.json\"\n        self.json_data = None\n\n        # message port\
      \ setup\n        self.message_in = 'msg_in'\n        self.message_port_register_in(pmt.intern(self.message_in))\n\
      \        self.set_msg_handler(pmt.intern(self.message_in), self.mailbox)\n \
      \       self.message_out = 'msg_out'\n        self.message_port_register_out(pmt.intern(self.message_out))\n\
      \        \n    def extract_pmt(self, msg):\n        try:\n            data =\
      \ pmt.to_python(msg)\n        except:\n            self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(\"Err: Invalid format\"))\n        return data\n\n    def unpack(self,\
      \ msg):\n        if msg[0] == self.addr:\n            return msg[1:]\n     \
      \   else: return False\n\n\n    def mailbox(self, msg):\n        r = {}\n  \
      \      try:\n            data = self.extract_pmt(msg)\n\n            #If address\
      \ check is active:\n            data = self.unpack(data)\n            if data\
      \ == False: return \n\n            varname = list(data[1].keys())[0]\n     \
      \       if varname not in self.__dict__:\n                raise Exception(\"\
      Err: Unknown variable\")\n            \n            if data[0].lower() == \"\
      get\":\n                r[varname] = self.__dict__[varname]\n            elif\
      \ data[0].lower() == \"set\":\n                if type(data[1][varname]) !=\
      \ type(self.__dict__[varname]):\n                    raise Exception(\"Err:\
      \ Variable in wrong format\")\n                else:\n                    self.__dict__[varname]\
      \ = data[1][varname]\n                    r[varname] = \"ok\"\n            \n\
      \            #If address return with SRC\n            r = [self.addr, r]\n\n\
      \            self.message_port_pub(pmt.intern(self.message_out), pmt.to_pmt(r))\n\
      \            return\n\n        except Exception as e:\n            self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(str(e)))\n\n   \n    def work(self, input_items, output_items):\n\
      \        if self.json_data == None:\n            with open(self.filename) as\
      \ json_file:\n                self.json_data = json.load(json_file)\n\n    \
      \     # determine the appropriate modcod\n        modcod_idx = self.json_data[self.modcod][\"\
      MOD\"]\n        match modcod_idx:\n            case \"g4FSK\":\n           \
      \     modcod_idx = 0\n            case \"MSK\":\n                modcod_idx\
      \ = 1\n            case \"gMSK\":\n                modcod_idx = 2\n        \
      \    case _:\n                raise ValueError(\"Invalid modcod\")\n       \
      \ \n        output_items[0][:] = input_items[modcod_idx][:] \n        \n   \
      \     return len(output_items[0])\n"
    addr: '''demux_1'''
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('MUX', 'blk', [('addr', "'modcod'")], [('0', 'byte', 1), ('1', 'byte',
      1), ('2', 'byte', 1), ('msg_in', 'message', 1)], [('0', 'byte', 1), ('msg_out',
      'message', 1)], '', ['addr'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2400, 1244.0]
    rotation: 0
    state: enabled
- name: epy_block_2_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\n\nclass\
      \ blk(gr.sync_block):  # other base classes are basic_block, decim_block, interp_block\n\
      \n    def __init__(self, fft_size=2**15, bandwidth=500, samplerate = 32e3, addr\
      \ = \"snr_meas\"):  # only default arguments here\n        gr.sync_block.__init__(\n\
      \            self,\n            name='SNR Measurement',   \n            in_sig\
      \ = [(np.complex64, fft_size)],\n            out_sig = None \n        )\n  \
      \      self.addr = addr\n        self.fft_size = fft_size\n        self.samplerate\
      \ = samplerate\n        self.bandwidth = bandwidth\n        self.snrAvg = 0\n\
      \        \n        self.snr = np.zeros(int((samplerate/fft_size)))\n       \
      \ self.window = int(0.5*(samplerate/fft_size)) # 0.5 s window\n        self.kernel\
      \ = np.ones(self.window) / self.window\n\n        # message port setup\n   \
      \     self.message_in = 'msg_in'\n        self.message_port_register_in(pmt.intern(self.message_in))\n\
      \        self.set_msg_handler(pmt.intern(self.message_in), self.mailbox)\n \
      \       self.message_out = 'msg_out'\n        self.message_port_register_out(pmt.intern(self.message_out))\n\
      \n    def extract_pmt(self, msg):\n        try:\n            data = pmt.to_python(msg)\n\
      \        except:\n            self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(\"Err: Invalid format\"))\n        return data\n\n    def unpack(self,\
      \ msg):\n        if msg[0] == self.addr:\n            return msg[1:]\n     \
      \   else: return False\n\n\n    def mailbox(self, msg):\n        r = {}\n  \
      \      try:\n            data = self.extract_pmt(msg)\n\n            #If address\
      \ check is active:\n            data = self.unpack(data)\n            if data\
      \ == False: return \n\n            varname = list(data[1].keys())[0]\n     \
      \       if varname not in self.__dict__:\n                raise Exception(\"\
      Err: Unknown variable\")\n            \n            if data[0].lower() == \"\
      get\":\n                r[varname] = self.__dict__[varname]\n            elif\
      \ data[0].lower() == \"set\":\n                if type(data[1][varname]) !=\
      \ type(self.__dict__[varname]):\n                    raise Exception(\"Err:\
      \ Variable in wrong format\")\n                else:\n                    self.__dict__[varname]\
      \ = data[1][varname]\n                    r[varname] = \"ok\"\n            \n\
      \            #If address return with SRC\n            r = [self.addr, r]\n\n\
      \            self.message_port_pub(pmt.intern(self.message_out), pmt.to_pmt(r))\n\
      \            return\n\n        except Exception as e:\n            self.message_port_pub(pmt.intern(self.message_out),\
      \ pmt.to_pmt(str(e)))\n\n    def work(self, input_items, output_items):    \
      \    \n        \n        data = input_items[0][0][:]\n\n        fft = np.fft.fft(data)\
      \ * 1/self.fft_size\n        fft_shifted = np.fft.fftshift(fft) \n        magsquared\
      \ = fft_shifted.real**2 + fft_shifted.imag**2\n        res = self.samplerate/self.fft_size\n\
      \        span = int(self.bandwidth/res)\n        center = int(self.fft_size/2)\n\
      \        start =int( center - span/2)\n        stop = int(center + span/2)\n\
      \        sig = magsquared[start:stop]\n\n        \n        offset_span = int(span)\
      \ \n        noise = np.append(magsquared[0:start-offset_span], magsquared[stop+offset_span:])\n\
      \        noise = span*np.mean(noise)\n\n        # print(f\"Range %i - %i, Noise\
      \ %.3f, len: %i\" % (start, stop, 10*np.log10(np.mean(sig)), len(sig)))\n  \
      \  \n        noise_power = 10*np.log10(noise)\n        receive_power = 10*np.log10(np.sum(sig))\n\
      \        snr = receive_power - noise_power\n\n        # Update the SNR buffer\n\
      \        self.snr = self.snr[1:]\n        self.snr = np.append(self.snr, snr)\n\
      \n        # Calculate the moving average of the SNR with convolution\n     \
      \   self.snrAvg = np.convolve(self.snr, self.kernel, mode='valid')[-1]\n   \
      \     print(self.snrAvg)\n        return 1\n"
    addr: '"snr_meas"'
    affinity: ''
    alias: ''
    bandwidth: 25e3
    comment: ''
    fft_size: 2**15
    maxoutbuf: '0'
    minoutbuf: '0'
    samplerate: samp_rate
  states:
    _io_cache: ('SNR Measurement', 'blk', [('fft_size', '32768'), ('bandwidth', '500'),
      ('samplerate', '32000.0'), ('addr', "'snr_meas'")], [('0', 'complex', 32768),
      ('msg_in', 'message', 1)], [('msg_out', 'message', 1)], '', ['addr', 'bandwidth',
      'fft_size', 'samplerate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 1412.0]
    rotation: 0
    state: enabled
- name: g4fsk_decoding_0
  id: g4fsk_decoding
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1856, 1208.0]
    rotation: 0
    state: enabled
- name: import_0_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import numpy as np
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 140.0]
    rotation: 0
    state: enabled
- name: interp_fir_filter_xxx_0
  id: interp_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: Gaussian filter
    interp: sps
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_delay: '0'
    taps: taps.generate_taps(sps, 0.25)
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1776, 532.0]
    rotation: 0
    state: enabled
- name: interp_fir_filter_xxx_0_0
  id: interp_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: Gaussian filter
    interp: sps
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_delay: '0'
    taps: taps.generate_taps(sps, 0.25)
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1784, 308.0]
    rotation: 0
    state: enabled
- name: mmse_resampler_xx_0
  id: mmse_resampler_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    phase_shift: '0'
    resamp_ratio: 1/decimation
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2800, 444.0]
    rotation: 0
    state: enabled
- name: mmse_resampler_xx_1
  id: mmse_resampler_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    phase_shift: '0'
    resamp_ratio: decimation
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 1260.0]
    rotation: 0
    state: enabled
- name: taps
  id: epy_module
  parameters:
    alias: ''
    comment: 'Calculates Gaussian

      filter taps'
    source_code: "import numpy as np\r\nfrom gnuradio import filter\r\n\r\ndef generate_taps(samples_per_symbol,\
      \ bt):\r\n    samples_per_symbol = int(samples_per_symbol)\r\n    ntaps = 4\
      \ * samples_per_symbol\r\n\r\n    # Generate Gaussian filter taps\r\n    gaussian_taps\
      \ = filter.firdes.gaussian(\r\n        1,                       # gain\r\n \
      \       samples_per_symbol,      # symbol_rate\r\n        bt,              \
      \        # bandwidth * symbol time\r\n        ntaps                    # number\
      \ of taps\r\n    )\r\n\r\n    taps = np.convolve(np.array(gaussian_taps), np.ones(samples_per_symbol))\r\
      \n    return taps"
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 12.0]
    rotation: 0
    state: enabled
- name: th
  id: epy_module
  parameters:
    alias: ''
    comment: "Calculates the through-\nput in bps for the \nselected modcod"
    source_code: "import json\r\nimport numpy as np\r\n\r\n\r\nfile_name = r\"C:\\\
      Users\\chri0\\Documents\\GitHub\\SDR_Ground_Station\\hardwareImplementation\\\
      phy\\physical_layer_transmitter\\MODCOD.json\"\r\n# file_name = \"MODCOD.json\"\
      \r\ndata:dict\r\nwith open(file_name, 'r') as f:\r\n    data = json.load(f)\r\
      \n\r\ndef modcod(bw, modcod):\r\n    spectral_eff = data[modcod][\"SPECT\"]\r\
      \n    throughput = spectral_eff * bw\r\n    return throughput\r\n"
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 12.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: usrp
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3120, 460.0]
    rotation: 0
    state: enabled
- name: virtual_sink_1
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: msg_in
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3024, 852.0]
    rotation: 0
    state: enabled
- name: virtual_sink_2
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: msg_out
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1004.0, 632]
    rotation: 270
    state: enabled
- name: virtual_sink_2_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: msg_out2
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2556.0, 576]
    rotation: 270
    state: enabled
- name: virtual_sink_2_1
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: msg_out4
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [796.0, 1432]
    rotation: 270
    state: enabled
- name: virtual_sink_2_1_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: msg_out6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2460.0, 1408]
    rotation: 270
    state: enabled
- name: virtual_sink_2_1_1
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: msg_out5
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [524.0, 1560]
    rotation: 270
    state: enabled
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: usrp
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 1244.0]
    rotation: 0
    state: enabled
- name: virtual_source_1
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: msg_out
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2672, 948.0]
    rotation: 0
    state: enabled
- name: virtual_source_1_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: msg_in
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [932.0, 624]
    rotation: 90
    state: enabled
- name: virtual_source_1_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: msg_in
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2476.0, 584]
    rotation: 90
    state: enabled
- name: virtual_source_1_0_1
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: msg_in
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [708.0, 1440]
    rotation: 90
    state: enabled
- name: virtual_source_1_0_1_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: msg_in
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2380.0, 1416]
    rotation: 90
    state: enabled
- name: virtual_source_1_0_1_1
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: msg_in
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [420.0, 1576]
    rotation: 90
    state: enabled
- name: virtual_source_1_1
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: msg_out2
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2672, 980.0]
    rotation: 0
    state: enabled
- name: virtual_source_1_1_0_1
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: msg_out4
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2672, 1004.0]
    rotation: 0
    state: enabled
- name: virtual_source_1_1_0_1_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: msg_out5
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2672, 1036.0]
    rotation: 0
    state: enabled
- name: virtual_source_1_1_0_1_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: msg_out6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2664, 1068.0]
    rotation: 0
    state: enabled
- name: zeromq_pub_msg_sink_0
  id: zeromq_pub_msg_sink
  parameters:
    address: tcp://*:5556
    affinity: ''
    alias: ''
    bind: 'True'
    comment: ''
    timeout: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3032, 972.0]
    rotation: 0
    state: true
- name: zeromq_rep_sink_0
  id: zeromq_rep_sink
  parameters:
    address: tcp://*:5557
    affinity: ''
    alias: ''
    bind: 'True'
    comment: ''
    hwm: '-1'
    pass_tags: 'False'
    timeout: '100'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2992, 1228.0]
    rotation: 0
    state: enabled
- name: zeromq_req_source_0
  id: zeromq_req_source
  parameters:
    address: tcp://localhost:5558
    affinity: ''
    alias: ''
    bind: 'False'
    comment: ''
    hwm: '-1'
    maxoutbuf: '0'
    minoutbuf: '0'
    pass_tags: 'False'
    timeout: '100'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 484.0]
    rotation: 0
    state: enabled
- name: zeromq_sub_msg_source_0
  id: zeromq_sub_msg_source
  parameters:
    address: tcp://localhost:5555
    affinity: ''
    alias: ''
    bind: 'False'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    timeout: '100'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2672, 844.0]
    rotation: 0
    state: true

connections:
- [analog_frequency_modulator_fc_0, '0', epy_block_1_0_0, '2']
- [analog_frequency_modulator_fc_0_0, '0', epy_block_1_0_0, '1']
- [analog_quadrature_demod_cf_0, '0', digital_symbol_sync_xx_1_0, '0']
- [analog_quadrature_demod_cf_1, '0', digital_symbol_sync_xx_1_0_0, '0']
- [analog_quadrature_demod_cf_2, '0', digital_symbol_sync_xx_1_0_0_0, '0']
- [blocks_float_to_uchar_0, '0', epy_block_1_0_0_0, '0']
- [blocks_repack_bits_bb_0, '0', zeromq_rep_sink_0, '0']
- [blocks_repack_bits_bb_0_0, '0', blocks_throttle2_0, '0']
- [blocks_repeat_0, '0', analog_frequency_modulator_fc_0_0, '0']
- [blocks_stream_to_vector_0, '0', epy_block_2_0, '0']
- [blocks_throttle2_0, '0', epy_block_0, '0']
- [blocks_vco_c_0, '0', epy_block_1_0_0, '0']
- [digital_binary_slicer_fb_0, '0', epy_block_1_0_0_0, '2']
- [digital_binary_slicer_fb_0_0, '0', epy_block_1_0_0_0, '1']
- [digital_chunks_to_symbols_xx_0, '0', interp_fir_filter_xxx_0, '0']
- [digital_chunks_to_symbols_xx_0_0, '0', blocks_repeat_0, '0']
- [digital_chunks_to_symbols_xx_1, '0', interp_fir_filter_xxx_0_0, '0']
- [digital_symbol_sync_xx_1_0, '0', digital_binary_slicer_fb_0, '0']
- [digital_symbol_sync_xx_1_0_0, '0', digital_binary_slicer_fb_0_0, '0']
- [digital_symbol_sync_xx_1_0_0_0, '0', g4fsk_decoding_0, '0']
- [epy_block_0, '0', digital_chunks_to_symbols_xx_1, '0']
- [epy_block_0, '1', digital_chunks_to_symbols_xx_0_0, '0']
- [epy_block_0, '2', digital_chunks_to_symbols_xx_0, '0']
- [epy_block_0, decim_out, blocks_msgpair_to_var_1, inpair]
- [epy_block_0, msg_out, virtual_sink_2, '0']
- [epy_block_0, repack_out, blocks_msgpair_to_var_0, inpair]
- [epy_block_0_0, '0', analog_quadrature_demod_cf_2, '0']
- [epy_block_0_0, '1', analog_quadrature_demod_cf_1, '0']
- [epy_block_0_0, '2', analog_quadrature_demod_cf_0, '0']
- [epy_block_0_0, msg_out, virtual_sink_2_1, '0']
- [epy_block_1_0_0, '0', mmse_resampler_xx_0, '0']
- [epy_block_1_0_0, msg_out, virtual_sink_2_0, '0']
- [epy_block_1_0_0_0, '0', blocks_repack_bits_bb_0, '0']
- [epy_block_1_0_0_0, msg_out, virtual_sink_2_1_0, '0']
- [epy_block_2_0, msg_out, virtual_sink_2_1_1, '0']
- [g4fsk_decoding_0, '0', blocks_float_to_uchar_0, '0']
- [interp_fir_filter_xxx_0, '0', analog_frequency_modulator_fc_0, '0']
- [interp_fir_filter_xxx_0_0, '0', blocks_vco_c_0, '0']
- [mmse_resampler_xx_0, '0', virtual_sink_0, '0']
- [mmse_resampler_xx_1, '0', epy_block_0_0, '0']
- [virtual_source_0, '0', blocks_stream_to_vector_0, '0']
- [virtual_source_0, '0', mmse_resampler_xx_1, '0']
- [virtual_source_1, '0', zeromq_pub_msg_sink_0, in]
- [virtual_source_1_0, '0', epy_block_0, msg_in]
- [virtual_source_1_0_0, '0', epy_block_1_0_0, msg_in]
- [virtual_source_1_0_1, '0', epy_block_0_0, msg_in]
- [virtual_source_1_0_1_0, '0', epy_block_1_0_0_0, msg_in]
- [virtual_source_1_0_1_1, '0', epy_block_2_0, msg_in]
- [virtual_source_1_1, '0', zeromq_pub_msg_sink_0, in]
- [virtual_source_1_1_0_1, '0', zeromq_pub_msg_sink_0, in]
- [virtual_source_1_1_0_1_0, '0', zeromq_pub_msg_sink_0, in]
- [virtual_source_1_1_0_1_0_0, '0', zeromq_pub_msg_sink_0, in]
- [zeromq_req_source_0, '0', blocks_repack_bits_bb_0_0, '0']
- [zeromq_sub_msg_source_0, out, virtual_sink_1, '0']

metadata:
  file_format: 1
  grc_version: 3.10.9.2
